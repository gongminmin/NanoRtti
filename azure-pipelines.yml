variables:
  configuration: Release
  test_cmd_multi_cfg: './Build/bin/$(configuration)/Test'
  test_cmd_single_cfg: './Build/bin/Test'

stages:
- stage: ClangFormat
  jobs:
  - job: ClangFormat
    pool:
      vmImage: Ubuntu-22.04

    steps:
    - script: |
        mkdir Build
        cd Build
        cmake -G "Unix Makefiles" -DNR_CLANGFORMAT=ON ../
        make clang_format
        cd ../
        git diff --exit-code $(Build.SourceVersion)
      failOnStderr: true
      displayName: 'Check code formatting'

- stage: Build
  condition: succeeded('ClangFormat')
  jobs:
  - job: Build

    variables:
      toolset: ''
      build_setup_cmd: ''
      build_type: '-DCMAKE_BUILD_TYPE:STRING=$(configuration)'

    strategy:
      matrix:
        Windows_vc142:
          vmImage: windows-2019
          generator: 'Visual Studio 16 2019'
          toolset: '-T v142'
          CXX: cl
          build_type: ''
          test_cmd: $(test_cmd_multi_cfg)
        Windows_vc143:
          vmImage: windows-2022
          generator: 'Visual Studio 17 2022'
          toolset: '-T v143'
          CXX: cl
          build_type: ''
          test_cmd: $(test_cmd_multi_cfg)
        Windows_clangcl:
          vmImage: windows-2019
          generator: 'Visual Studio 16 2019'
          toolset: '-T ClangCL'
          CXX: clang-cl
          build_type: ''
          test_cmd: $(test_cmd_multi_cfg)
        Windows_gcc:
          vmImage: windows-2019
          build_setup_cmd: export PATH=/c/msys64/mingw64/bin:$PATH
          generator: 'MinGW Makefiles'
          CXX: g++
          test_cmd: $(test_cmd_single_cfg)
        Linux_gcc12:
          vmImage: Ubuntu-22.04
          generator: 'Unix Makefiles'
          CXX: g++-12
          test_cmd: $(test_cmd_single_cfg)
        Linux_clang15:
          vmImage: Ubuntu-22.04
          generator: 'Unix Makefiles'
          CXX: clang++-15
          test_cmd: $(test_cmd_single_cfg)
        macOS_clang:
          vmImage: macOS-13
          generator: 'Unix Makefiles'
          CXX: clang++
          test_cmd: $(test_cmd_single_cfg)

    pool:
      vmImage: $(vmImage)

    steps:
      - checkout: self
        fetchDepth: 5

      - bash: |
          eval '$(build_setup_cmd)'
          mkdir Build
          cd Build
          cmake -G "$(generator)" $(toolset) -DCMAKE_CXX_COMPILER=$(CXX) $(build_type) ../
          cmake --build . --config $(configuration)
          cd ../
        failOnStderr: true
        displayName: 'Build'

      - bash: eval '$(test_cmd)'
        displayName: 'Test'
        condition: ne(variables['test_cmd'], '')
